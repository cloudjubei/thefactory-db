{
  "id": "67749a79-fda3-4c2b-9c35-b644c761b895",
  "status": "=",
  "title": "Ongoing Improvements",
  "description": "Various ongoing improvements to the project",
  "features": [
    {
      "id": "8a94bd10-9838-4e6f-9b6c-1b2060d6de40",
      "status": "=",
      "title": "Aim for close to 100% test coverage",
      "description": "We need to make sure that the tests cover as close as 100% of the codebase.\nObviously, things like the ai service with getting results from the AI cannot be fully tested - but we can test for many ranges of responses by mocking the LLM responses appropriately. The same idea should be taken everywhere to try to achieve 100% coverage.\n\nOne important thing is to make sure that data that is entering and leaving endpoints is validated thoroughly to make sure that it matches the expected schema. This should be part of the code and the tests should validate it too (i.e. malformed objects being rejected).\n\nThere needs to be a relevant section in @README.md  explaining how vital testing is and to refer to @docs/TESTING.md for all guidance related to writing tests and the standard for them. For reference there is also the @docs/CODE_STANDARD.md  document that highlights the coding standard within the project.\n\nNEVER FIX CODE JUST SO TESTS PASS - THE PROJECT CODE NEEDS TO MAKE SENSE AND WORK SO THE FEATURES ARE SATISFIED. TESTS ALWAYS NEED TO POKE AT HOLES AND EDGES OF THE CODE.",
      "context": [],
      "createdAt": "2025-09-19T10:36:00.358Z",
      "updatedAt": "2025-09-22T22:55:16.613Z",
      "blockers": []
    },
    {
      "id": "656fa3b5-b86a-41f3-8312-3aa1ed774c6d",
      "status": "=",
      "title": "Code standard",
      "description": "The document @docs/CODE_STANDARD.md  highlights the overall architecture and coding standards maintained in this project.\nThere is a clear reference to it inside @README.md and @docs/FILE_ORGANISATION.md so that anyone creating new features or updating existing ones will go to it.\nIt should be as succinct as possible, but explaining the idea as well as possible.\n\nGo over all the code and make sure that it satisfies the standards.",
      "context": [],
      "createdAt": "2025-09-19T10:36:08.586Z",
      "updatedAt": "2025-09-22T22:55:15.264Z",
      "blockers": []
    },
    {
      "id": "03858e2a-b346-4a6c-b711-427a85401e8e",
      "status": "+",
      "title": "Hybrid Search needs improvements",
      "description": "Right now the search doesn't seem to be pick up file names for keyword search.\nWhen the query is passed in - for embedding/semantic search - it should process the whole query and let the embeddings score like they do now. But for keyword search, the query should be space separated - and each such keyword should be tested against the file contents and the file name. File name should score separately from contents - it should be weighed 50/50 (file name vs contents) for the final score for the overall keyword score.",
      "context": [],
      "createdAt": "2025-09-23T12:18:10.277Z",
      "updatedAt": "2025-09-23T12:32:09.157Z",
      "completedAt": "2025-09-23T12:32:09.157Z"
    },
    {
      "id": "a83e8f50-66a3-44f7-a01f-057de5bb0a00",
      "status": "+",
      "title": "The current tests are too basic",
      "description": "We need to have more advanced tests to really see that the search functionality is working appropriately.\nWe need two sets of files - 1 made up non-code documents and 2 this project's files (all of them).\n\nWe need to have the tests cover all sorts of cases for using the hybrid search - when the weight is 0, 0.2, 0.5, 0.8, 1.0 . When there is information just in the title of the file, just in the contents or just in the embeddings (semantically it's there).",
      "context": [],
      "createdAt": "2025-09-23T12:45:38.880Z",
      "updatedAt": "2025-09-23T12:51:52.069Z",
      "completedAt": "2025-09-23T12:51:52.069Z"
    },
    {
      "id": "f018a399-a2fb-47f5-9990-b89fc7381097",
      "status": "+",
      "title": "Need to create an e2e tests using a real db under `tests/e2e`",
      "description": "First we need to explain to the user how to easily spin up a test database with docker compose that will be used for e2e tests.\nThen assuming the database is running, there need to be e2e tests for indexing and most importantly for hybrid-search - mirroring all the tests inside `tests` that would require to call `openDatabase`",
      "context": [],
      "createdAt": "2025-09-23T13:02:45.316Z",
      "updatedAt": "2025-09-23T16:17:21.497Z",
      "rejection": "Make sure there's a test that checks that entities/documents get their updateAt regenerated on update and that entities get their fts regenerated on updated (this should be automatic based on the schema.sql). There should be appropriate atomic e2e tests for all these cases.",
      "blockers": [],
      "completedAt": "2025-09-23T16:17:21.497Z"
    },
    {
      "id": "bd58e850-de61-4e54-adba-9a7b49e76f29",
      "status": "+",
      "title": "Make more complex e2e tests",
      "description": "THere should be an equivalent e2e test version of @tests/hybrid-search-advanced.test.ts .\nWe should have one version for entities and one for documents.\nThe goal is to stress test different weights to the scores [0,0.2,0.5,0.8,1] of the keywords vs embedding weights.\nWe also make sure that files are picked up based on their file names - so there need to be appropriate tests for that.\nFollow @docs/TESTING.md for standards. \nMake sure the tests are as atomic and self-contained as possible.\nPrefer more easily failable tests rather than a huge battery of tests that could fail at the beginning.",
      "context": [
        "tests/hybrid-search-advanced.test.ts",
        "docs/TESTING.md"
      ],
      "createdAt": "2025-09-23T15:07:16.099Z",
      "updatedAt": "2025-09-23T16:20:36.753Z",
      "rejection": "When running a test fails (error shown at the end).\nThese tests should be far more atomic (each test should be testing a single thing) - i.e. one per tested weight. Use `beforeAll` to seed a batch of 20 entities/documents that should have far more content. Then run all these tests.\nThe error:\n\n\n FAIL  tests/e2e/documents-hybrid-advanced.e2e.test.ts > E2E: Documents Hybrid Search Advanced (real DB) > ranks content, title-only (src), and semantic-only documents across weights [0,0.2,0.5,0.8,1]\nAssertionError: expected 2 to be less than or equal to 1\n ❯ tests/e2e/documents-hybrid-advanced.e2e.test.ts:65:30\n     63|     const positions = resultsByW.map((res) => ({ pD2: pos(res, d2.id), pD3: pos(res, d3.id) }))\n     64|     // At low text weight (semantic-dominant), semantic-only should be ahead of or equal to title-only\n     65|     expect(positions[0].pD3).toBeLessThanOrEqual(positions[0].pD2)\n       |                              ^\n     66|     // At high text weight (text-dominant), title-only should be ahead of or equal to semantic-only\n     67|     expect(positions[positions.length - 1].pD2).toBeLessThanOrEqual(positions[positions.length - 1].pD3)",
      "blockers": [],
      "completedAt": "2025-09-23T16:20:36.753Z"
    }
  ],
  "featureIdToDisplayIndex": {
    "656fa3b5-b86a-41f3-8312-3aa1ed774c6d": 1,
    "8a94bd10-9838-4e6f-9b6c-1b2060d6de40": 2,
    "03858e2a-b346-4a6c-b711-427a85401e8e": 3,
    "a83e8f50-66a3-44f7-a01f-057de5bb0a00": 4,
    "f018a399-a2fb-47f5-9990-b89fc7381097": 5,
    "bd58e850-de61-4e54-adba-9a7b49e76f29": 6
  },
  "createdAt": "2025-09-19T01:04:36.087Z",
  "updatedAt": "2025-09-19T01:04:36.087Z"
}